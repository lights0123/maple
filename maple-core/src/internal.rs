//! Internal DOM manipulation utilities. Generated by the `template!` macro. Should not be used directly.
//! Internal APIs can be changed at any time without a major release.

use std::fmt;

use web_sys::DocumentFragment;

use crate::generic_node::{EventListener, GenericNode};
use crate::prelude::*;

/// Create a new [`GenericNode`] element with the specified tag.
pub fn element<G: GenericNode>(tag: &str) -> G {
    G::element(tag)
}

pub fn fragment() -> DocumentFragment {
    web_sys::window()
        .unwrap()
        .document()
        .unwrap()
        .create_document_fragment()
}

/// Sets an attribute on an [`GenericNode`].
pub fn attr<G: GenericNode>(element: &G, name: &str, value: Box<dyn Fn() -> String>) {
    let element = element.clone();
    let name = name.to_string();
    create_effect(move || {
        element.set_attribute(&name, &value());
    })
}

/// Sets an event listener on an [`GenericNode`].
pub fn event<G: GenericNode>(element: &G, name: &str, handler: Box<EventListener>) {
    element.event(name, handler)
}

/// Appends a child node to an element.
pub fn append<G: GenericNode>(element: &G, child: &G) {
    element.append_child(child);
}

/// Appends a [`dyn Render`](Render) to the `parent` node.
/// Node is created inside an effect with [`Render::update_node`].
pub fn append_render<G: GenericNode>(parent: &G, child: Box<dyn Fn() -> Box<dyn Render<G>>>) {
    parent.append_render(child)
}

/// Appends a static text node to the `parent` node.
pub fn append_static_text<G: GenericNode>(parent: &G, text: &dyn fmt::Display) {
    let text_node = G::text_node(&format!("{}", text));

    parent.append_child(&text_node);
}

/// Sets the value of a [`NodeRef`].
pub fn set_noderef<G: GenericNode>(node: &G, noderef: NodeRef<G>) {
    noderef.set(node.clone());
}
